- job:
    name: nw-deploy-focal-amd64-lxd
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Deploy local lxd on focal+amd64 using focal apps.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - wait-for-cloud-init
      - prepare-functional-test-core:
          platform: "linux/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          timeout -s INT 60m ${TESTS_DIR}/deploy_job.py --series focal \
              parallel-lxd $JUJU_BIN $WORKSPACE/artifacts $JOB_NAME --debug \
              --agent-url https://ci-run-streams.s3.amazonaws.com/builds/build-${SHORT_GIT_COMMIT}/ --agent-stream build-${SHORT_GIT_COMMIT}
    publishers:
      - artifact-results
      - log-panic-check

- job:
    name: nw-deploy-jammy-amd64-lxd
    node: ephemeral-jammy-4c-16g-amd64
    description: |-
      Deploy local lxd on jammy+amd64 using jammy apps.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - wait-for-cloud-init
      - shell: |-
          #!/bin/bash
          set -eu

          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            rust-all \
            python3-dev
      - pip-install:
          modules: setuptools
      - pip-install:
          modules: setuptools-rust
      - functional-python-deps
      - get-cloud-environments
      - prepare-functional-test-core:
          platform: "linux/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          timeout -s INT 60m ${TESTS_DIR}/deploy_job.py --series jammy \
              parallel-lxd $JUJU_BIN $WORKSPACE/artifacts $JOB_NAME --debug \
              --agent-url https://ci-run-streams.s3.amazonaws.com/builds/build-${SHORT_GIT_COMMIT}/ --agent-stream build-${SHORT_GIT_COMMIT}
    publishers:
      - artifact-results
      - log-panic-check


- job:
    name: nw-deploy-client-centos9
    node: ephemeral-centos9-8c-32g-amd64
    description: |-
      Deploy local aws on centos9+amd64 using jammy apps.
    parameters:
    - validating-string:
        description: The git short hash for the commit you wish to test
        name: SHORT_GIT_COMMIT
        regex: ^\S{7}$
        msg: Enter a valid 7 char git sha
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    - string:
        default: us-west-2
        description: Which region in aws to run on.
        name: region
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - wait-for-cloud-init
      - functional-python-deps:
          modules: pexpect
      - prepare-functional-test-core:
          platform: "linux/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          timeout -s INT 60m ${TESTS_DIR}/deploy_job.py --series jammy \
                --region $region \
                parallel-aws $JUJU_BIN $WORKSPACE/artifacts $JOB_NAME --debug \
                --agent-url https://ci-run-streams.s3.amazonaws.com/builds/build-${SHORT_GIT_COMMIT}/ --agent-stream build-${SHORT_GIT_COMMIT}
    publishers:
      - artifact-results
      - log-panic-check


- job:
    name: nw-deploy-jammy-amd64-maas-2-9
    node: maas
    description: |-
      Deploy local maas-2-9 on jammy+amd64 using jammy apps.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - prepare-functional-test-core:
          platform: "linux/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          timeout -s INT 60m ${TESTS_DIR}/deploy_job.py --series jammy \
             parallel-finfolk-vmaas $JUJU_BIN $WORKSPACE/artifacts $JOB_NAME
    publishers:
      - artifact-results
      - log-panic-check

- job:
    name: nw-deploy-jammy-amd64-equinix
    node: ephemeral-jammy-4c-16g-amd64
    description: |-
      Deploy to equinix cloud jammy+amd64 using jammy apps.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - wait-for-cloud-init
      - pip-install:
          modules: setuptools
      - functional-python-deps
      - get-cloud-environments
      - prepare-functional-test-core:
          platform: "linux/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          timeout -s INT 60m ${TESTS_DIR}/deploy_job.py --series jammy \
             parallel-equinix $JUJU_BIN $WORKSPACE/artifacts $JOB_NAME
    publishers:
      - artifact-results
      - log-panic-check

- job:
    name: nw-deploy-vsphere
    node: vsphere
    description: |-
      Deploy on vsphere using jammy apps.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - wait-for-cloud-init
      - prepare-functional-test-core:
          platform: "linux/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          # A bit gross, need to handle the no_proxy parts for munna better.
          export no_proxy=$no_proxy,$(echo 10.247.4.{1..100} | tr ' ' ',')
          # Boston vsphere and its disks.
          export no_proxy=$no_proxy,10.246.152.100,azalea.internal,domino.internal,fludd.internal,eyerok.internal,chrom.internal,barnacle.internal
          # Matches the VLAN used for vsphere juju-qa config
          export no_proxy=$no_proxy,10.246.157.0/24
          timeout -s INT 60m ${TESTS_DIR}/deploy_job.py \
             ENV=parallel-vsphere-vmfolder $JUJU_BIN $WORKSPACE/artifacts $JOB_NAME
    publishers:
      - artifact-results
      - log-panic-check


- job:
    name: nw-deploy-client-macos
    node: mac
    description: |-
      Deploy on MacOS using jammy apps.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    - string:
        default: europe-west1
        description: Which region in gce to run on.
        name: region
    wrappers:
      - cirun-test-stuck-timeout
    builders:
      - wait-for-cloud-init
      - prepare-functional-test-core:
          platform: "darwin/${BUILD_ARCH}"
      - shell: |-
          #!/bin/bash
          set -eu

          ${TESTS_DIR}/deploy_job.py parallel-gce ${JUJU_BIN} artifacts testing-osx-client1 \
          --region $region \
          --series jammy \
          --agent-url https://ci-run-streams.s3.amazonaws.com/builds/build-${SHORT_GIT_COMMIT} --agent-stream build-${SHORT_GIT_COMMIT}
    publishers:
      - artifact-results
      - log-panic-check


- job:
    name: nw-deploy-client-windows
    node: ephemeral-focal-4c-16g-amd64
    wrappers:
        - timeout:
            timeout: 30
            fail: true
            type: absolute
        - cirun-test-stuck-timeout
    description: |-
      Deploy on Windows.
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        default: 'amd64'
        description: 'Arch to build for.'
        name: BUILD_ARCH
    builders:
      - wait-for-cloud-init
      - prepare-functional-test-core:
          platform: "windows/${BUILD_ARCH}"
      - shell:
          !include-raw: ../../scripts/deploy-client-windows.sh
    publishers:
      - log-panic-check
