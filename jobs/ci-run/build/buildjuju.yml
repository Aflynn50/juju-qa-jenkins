## Jobs for building juju on host machines.
# Uses macros described in utils.yml

- job:
    name: "build-juju-linux-arm64"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for linux/arm64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "linux/arm64"
      - create-build-payload-tarballs:
          platforms: "linux/arm64"
      - upload-s3-binaries:
          platforms: "linux/arm64"
      - upload-s3-agent-binaries:
          platforms: "linux/arm64"

- job:
    name: "build-juju-linux-amd64"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for linux/amd64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "linux/amd64"
      - create-build-payload-tarballs:
          platforms: "linux/amd64"
      - upload-s3-binaries:
          platforms: "linux/amd64"
      - upload-s3-agent-binaries:
          platforms: "linux/amd64"

- job:
    name: "build-juju-linux-s390x"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for linux/s390x
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "linux/s390x"
      - create-build-payload-tarballs:
          platforms: "linux/s390x"
      - upload-s3-binaries:
          platforms: "linux/s390x"
      - upload-s3-agent-binaries:
          platforms: "linux/s390x"

- job:
    name: "build-juju-linux-ppc64le"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for linux/ppc64le
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "linux/ppc64le"
      - create-build-payload-tarballs:
          platforms: "linux/ppc64le"
      - upload-s3-binaries:
          platforms: "linux/ppc64le"
      - upload-s3-agent-binaries:
          platforms: "linux/ppc64le"

- job:
    name: "build-juju-darwin-amd64"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for darwin/amd64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "darwin/amd64"
      - create-build-payload-tarballs:
          platforms: "darwin/amd64"
      - upload-s3-binaries:
          platforms: "darwin/amd64"
      - upload-s3-agent-binaries:
          platforms: "darwin/amd64"

- job:
    name: "build-juju-darwin-arm64"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for darwin/arm64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "darwin/arm64"
      - create-build-payload-tarballs:
          platforms: "darwin/arm64"
      - upload-s3-binaries:
          platforms: "darwin/arm64"
      - upload-s3-agent-binaries:
          platforms: "darwin/arm64"

- job:
    name: "build-juju-windows-amd64"
    node: ephemeral-focal-8c-32g-amd64
    description: |-
      Build juju binaries for windows/amd64
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ''
          description: 'Go version used for build.'
          name: GOVERSION
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - get-s3-source-payload
      - set-builder-description
      - make-juju:
          platforms: "windows/amd64"
      - create-build-payload-tarballs:
          platforms: "windows/amd64"
      - upload-s3-binaries:
          platforms: "windows/amd64"
      - upload-s3-agent-binaries:
          platforms: "windows/amd64"

# make-juju is responsible for making the juju binaries for a given set of
# platforms that are space seperated in GOOS/GOARCH format. For example
# "linux/amd64 linux/arm64"
# Epected parameters:
#   platforms: space sperated list of go style platforms
# Epected pre-requistates:
# - get-s3-source-payload has been called before this builder.
- builder:
    name: "make-juju"
    builders:
      - shell: |-
          #!/bin/bash
          set -eu

          touch make-juju.properties
          echo "CLIENT_PACKAGE_PLATFORMS={platforms}" >> make-juju.properties
          echo "AGENT_PACKAGE_PLATFORMS={platforms}" >> make-juju.properties
      - inject:
          properties-file: make-juju.properties
      - shell: |-
          #!/bin/bash
          set -eu

          rm -rf make-juju.properties
      - host-src-command-v2:
          src_command: !include-raw: ../scripts/snippet_make-release-build.sh

# upload-s3-binaries is responsible for uploading a binaries tarball after a
# successful make-juju. This builder will make a seperate tarball and upload
# for each platforms in platforms.
# Epected paramters:
#   platforms: space sperated list of go style platforms
# Expected pre-requistates:
# - make-juju has been called for the same platforms as this command.
- builder:
    name: "upload-s3-binaries"
    builders:
      - install-s3cmd
      - get-s3-creds
      - shell: |-
          #!/bin/bash
          set -eu

          for platform in "{platforms}"; do
            echo "Uploading juju binaries for ${{platform}}"

            build_platform_dir="${{BUILD_DIR}}/${{platform//\//_}}/bin"

            arch=$(echo "${{platform}}" | cut -f 2 -d '/')
            os=$(echo "${{platform}}" | cut -f 1 -d '/')

            binary_tarball_name="juju_binaries-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}-${{arch}}.tar.xz"

            s3cmd --config $S3_CFG \
              put \
              --no-progress \
              ${{build_platform_dir}}/${{binary_tarball_name}} \
              s3://juju-qa-data/ci-run/build-${{SHORT_GIT_COMMIT}}/build-${{arch}}/${{os}}/
          done

# upload-s3-agent-binaries is responsible for uploading a binaries tarball after
# a successful make-juju for all of the Juju agents. This builder will make a
# seperate tarball and upload for each platforms in platforms.
# Epected paramters:
#   platforms: space sperated list of go style platforms
# Expected pre-requistates:
# - make-juju has been called for the same platforms as this command.
- builder:
    name: "upload-s3-agent-binaries"
    builders:
      - install-s3cmd
      - get-s3-creds
      - shell: |-
          #!/bin/bash
          set -eu

          for platform in "{platforms}"; do
            echo "Uploading juju binaries for ${{platform}}"

            echo "Uploading juju agent binaries for ${{platform}}"

            build_platform_dir="${{BUILD_DIR}}/${{platform//\//_}}/bin"

            arch=$(echo "${{platform}}" | cut -f 2 -d '/')
            os=$(echo "${{platform}}" | cut -f 1 -d '/')

            agent_tarball_name=juju-${{JUJU_VERSION}}-${{os}}-${{arch}}.tgz

            s3cmd --config $S3_CFG \
                put \
                --no-progress \
                ${{build_platform_dir}}/${{agent_tarball_name}} \
                s3://juju-qa-data/ci-run/build-${{SHORT_GIT_COMMIT}}/agents/
          done


- job:
    name: "build-jujud-operator"
    node: ephemeral-focal-8c-32g-amd64
    description: Build juju docker image for caas operator on all platforms.
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
      - timeout:
          fail: true
          timeout: 20
          type: absolute
    parameters:
      - string:
          default: ""
          description: "Enable sub job to be run individually."
          name: SHORT_GIT_COMMIT
      - string:
          default: ""
          description: 'Go version used for build.'
          name: GOVERSION
      - choice:
          name: OPERATOR_IMAGE_ACCOUNT
          choices:
            - jujuqabot
            - jujusolutions
          default: "jujuqabot"
          description: "Operator docker image account name."
      - string:
          default: "linux/amd64 linux/arm64 linux/s390x linux/ppc64le"
          description: "Space seperated list of Go Platforms to build the OCI images for"
          name: BUILD_PLATFORMS
    builders:
      - wait-for-cloud-init
      - set-common-environment
      - install-common-tools
      - setup-go-environment
      - shell: |-
          #!/bin/bash
          set -eu

          touch build.properties
          echo "DOCKER_USERNAME=${OPERATOR_IMAGE_ACCOUNT}" >> build.properties

          cat build.properties
      - inject:
          properties-file: build.properties
      - get-s3-source-payload
      - host-install-docker
      - docker-login
      - get-s3-build-payload-packaging:
          platforms: "${BUILD_PLATFORMS}"
      - set-builder-description
      - host-src-command:
          src_command: !include-raw: ../scripts/snippet_caas-jujud-operator.sh
          env_file: "build.properties"


# create-build-payload-tarballs will for each platforms defined in platforms
# create a binary payload of the juju bins and a corresponding agent tar ball.
# This builder expects that the binaries for the platforms have already been
# built.
#
# platforms is a space seperated list of GO OS/ARCH platforms.
- builder:
    name: "create-build-payload-tarballs"
    builders:
      - shell: |-
          #!/bin/bash
          set -eu

          echo "Creating build payload tarbals for platforms \"{platforms}\""

          for platform in "{platforms}"; do
            build_platform_dir="${{BUILD_DIR}}/${{platform//\//_}}/bin"

            juju_name=juju
            if [[ -f "${{build_platform_dir}}/juju.exe" ]]; then
              juju_name=juju.exe
            fi

            jujud_name=jujud
            if [[ -f "${{build_platform_dir}}/jujud.exe" ]]; then
              jujud_name=jujud.exe
            fi

            jujuc_name=jujuc
            if [[ -f "${{build_platform_dir}}/jujuc.exe" ]]; then
              jujuc_name=jujuc.exe
            fi

            juju_metadata_name=juju-metadata
            if [[ -f "${{build_platform_dir}}/juju-metadata.exe" ]]; then
              juju_metadata_name=juju-metadata.exe
            fi

            # The k8sagent binary has been renamed to containeragent but we want
            # to retain the copy step until all branches have been properly
            # updated.
            containeragent_name=
            if [[ -f "${{build_platform_dir}}/k8sagent" ]]; then
              echo "k8sagent exists for platform ${{platform}}"
              containeragent_name=k8sagent
            elif [[ -f "${{build_platform_dir}}/k8sagent.exe" ]]; then
              echo "k8sagent exists for platform ${{platform}}"
              containeragent_name=k8sagent.exe
            fi

            if [[ -f "${{build_platform_dir}}/containeragent" ]]; then
              echo "containeragent exists for platform ${{platform}}"
              containeragent_name=containeragent
            elif [[ -f "${{build_platform_dir}}/containeragent.exe" ]]; then
              echo "containeragent exists for platform ${{platform}}"
              containeragent_name=containeragent.exe
            fi

            # TODO(pebble): pebble may change name for 2.9+ release.
            pebble_name=
            if [[ -f "${{build_platform_dir}}/pebble" ]]; then
              echo "pebble exists for platform ${{platform}}"
              pebble_name=pebble
            elif [[ -f "${{build_platform_dir}}/pebble.exe" ]]; then
              echo "pebble exists for platform ${{platform}}"
              pebble_name=pebble.exe
            fi

            wait_for_name=
            if [[ -f "${{build_platform_dir}}/juju-wait-for" ]]; then
              echo "juju-wait-for exists for platform ${{platform}}"
              wait_for_name=juju-wait-for
            elif [[ -f "${{build_platform_dir}}/juju-wait-for.exe" ]]; then
              echo "juju-wait-for exists for platform ${{platform}}"
              wait_for_name=juju-wait-for.exe
            fi

            arch=$(echo "${{platform}}" | cut -f 2 -d '/')
            os=$(echo "${{platform}}" | cut -f 1 -d '/')

            binary_tarball_name="juju_binaries-${{JUJU_VERSION}}-${{SHORT_GIT_COMMIT}}-${{arch}}.tar.xz"
            echo "Creating build payload for ${{platform}} - ${{binary_tarball_name}}"

            tar cfJ ${{build_platform_dir}}/${{binary_tarball_name}} \
              -C ${{build_platform_dir}}/ \
              ${{juju_name}} \
              ${{jujud_name}} \
              ${{jujuc_name}} \
              ${{juju_metadata_name}} \
              ${{containeragent_name}} \
              ${{pebble_name}} \
              ${{wait_for_name}}

            agent_tarball_name=juju-${{JUJU_VERSION}}-${{os}}-${{arch}}.tgz
            echo "Creating agent payload for ${{platform}} - ${{agent_tarball_name}}"

            tar cfz ${{build_platform_dir}}/${{agent_tarball_name}} \
              --owner root \
              --group root \
              --no-same-owner \
              -C ${{build_platform_dir}}/ \
              ${{jujud_name}} \
              ${{jujuc_name}}

          done

