- job:
    name: 'SimpleStreams'
    project-type: 'multijob'
    description: 'Generate and publish streams for a run.'
    condition: SUCCESSFUL
    node: noop-parent-jobs
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    builders:
      - get-build-details
      - set-test-description
      - multijob:
            name: GenerateSimpleStreams
            projects:
              - name: generate-testing-streams
                current-parameters: true
      - multijob:
            name: PublishSimpleStreams
            projects:
              - name: publish-testing-streams-aws
                current-parameters: true
              - name: publish-testing-streams-azure
                current-parameters: true


- job:
    name: 'generate-testing-streams'
    description: |-
      Publish stream metadata and agents from this build for use in
      functional testing.
    node: noop-parent-jobs
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    - string:
        name: INDEX_TYPE
        default: "agents"
        description: "Either 'agents' or 'tools' (for 2.8)"
    builders:
      - install-s3cmd
      - get-s3-creds
      - get-build-details
      - set-test-description
      - shell: |-
            #!/bin/bash
            # the rm's shouldn't be needed.
            rm -fr ${WORKSPACE}/agent_json || true
            mkdir ${WORKSPACE}/agent_json
            INDEX_TYPE="agents"
            if [[ "${JUJU_VERSION}" == 2.8* ]]; then
              INDEX_TYPE="tools"
            fi
      - get-s3-agent-json-payload:
            dest: ${WORKSPACE}/agent_json
      - shell: |-
            # Generate the streams data.
            mkdir generated
            json2streams --juju-format ${WORKSPACE}/agent_json/*.json ${WORKSPACE}/generated/

            GENERATED_STREAMS_TARBALL=build-${SHORT_GIT_COMMIT}-generated-streams.tar.xz
            tar cfJ ${GENERATED_STREAMS_TARBALL} -C generated/ streams

            s3cmd --config $S3_CFG \
                put \
                ${GENERATED_STREAMS_TARBALL} \
                s3://juju-qa-data/ci-run/build-${SHORT_GIT_COMMIT}/agents/


- job:
    name: 'publish-testing-streams-aws'
    description: |-
      Publish stream metadata and agents from this build for use in
      functional testing.
    node: noop-parent-jobs
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    builders:
      - install-s3cmd
      - get-s3-creds
      - get-build-details
      - set-test-description
      - shell: |-
            rm -fr ${WORKSPACE}/agent || true
            mkdir -p ${WORKSPACE}/agent/build-${SHORT_GIT_COMMIT}/
      - get-s3-agent-payload:
            dest: ${WORKSPACE}/agent/build-${SHORT_GIT_COMMIT}
      - retrieve-generated-streams
      - install-stream-patcher
      - shell: |-
          # Patch the index/product files so that all paths are namespaced by
          # the build ID. Basically, we create the following folder structure:
          # $root/
          #  - builds/build-SHA
          #    - streams/v1
          #    - agents/*.tgz
          ${WORKSPACE}/stream-patcher.py \
            ${WORKSPACE}/streams \
            ${SHORT_GIT_COMMIT}

          s3cmd sync --config $S3_CFG \
            ${WORKSPACE}/streams \
            s3://ci-run-streams/builds/build-${SHORT_GIT_COMMIT}/ \
            --acl-public

          # NOTE: this sync removes the "build-$SHA" indirection and effectively
          # pulls the binaries one folder up (under agent/)
          s3cmd sync $S3_CFG \
            ${WORKSPACE}/agent/build-${SHORT_GIT_COMMIT}/ \
            s3://ci-run-streams/builds/build-${SHORT_GIT_COMMIT}/agent/ \
            --acl-public


- job:
    name: 'publish-testing-streams-azure'
    description: |-
      Publish stream metadata and agents from this build for use in
      functional testing.
    node: noop-parent-jobs
    wrappers:
      - ansicolor
      - workspace-cleanup
      - timestamps
    parameters:
    - string:
        default: ""
        description: "Enable sub job to be run individually."
        name: SHORT_GIT_COMMIT
    builders:
      - get-build-details
      - set-test-description
      - shell: |-
            rm -fr ${WORKSPACE}/agent || true
            mkdir -p ${WORKSPACE}/agent/build-${SHORT_GIT_COMMIT}/
      - get-s3-agent-payload:
            dest: ${WORKSPACE}/agent/build-${SHORT_GIT_COMMIT}
      - retrieve-generated-streams
      - install-stream-patcher
      - get-azure-publish-script
      - get-azure-creds
      - shell: |-
          #!/bin/bash
          set -eu

          # Patch the index/product files so that all paths are namespaced by
          # the build ID. Basically, we create the following folder structure:
          # $root/
          #  - builds/build-SHA
          #    - streams/v1
          #    - agents/*.tgz
          ${WORKSPACE}/stream-patcher.py \
            ${WORKSPACE}/streams \
            ${SHORT_GIT_COMMIT}

          ${SCRIPT_DIR}/azure_publish_tools.py sync \
            ${WORKSPACE}/streams \
            ci-run-streams/builds/build-${SHORT_GIT_COMMIT}/streams

          # NOTE: this sync removes the "build-$SHA" indirection and effectively
          # pulls the binaries one folder up (under agent/)
          ${SCRIPT_DIR}/azure_publish_tools.py sync \
            ${WORKSPACE}/agent/build-${SHORT_GIT_COMMIT}/ \
            ci-run-streams/builds/build-${SHORT_GIT_COMMIT}/agent


- builder:
    name: 'retrieve-generated-streams'
    builders:
    - install-s3cmd
    - get-s3-creds
    - shell: |-
        GENERATED_STREAMS_TARBALL=build-${SHORT_GIT_COMMIT}-generated-streams.tar.xz
        s3cmd --config $S3_CFG \
          get \
          s3://juju-qa-data/ci-run/build-${SHORT_GIT_COMMIT}/agents/${GENERATED_STREAMS_TARBALL} \
          ./
        tar xf ${GENERATED_STREAMS_TARBALL}

- builder:
    name: 'install-stream-patcher'
    builders:
    - shell: |-
          #!/bin/bash

          # Create the stream product/index patching script on the fly

          index_type="agents"
          if [[ "${JUJU_VERSION}" == 2.8* ]]; then
            index_type="tools"
          fi

          cat  <<EOT > ${WORKSPACE}/stream-patcher.py
          #!/usr/bin/env python3
          
          from argparse import ArgumentParser
          from os import path
          import collections.abc
          import json
          import sys
          
          
          def main():
              parser = ArgumentParser()
              parser.add_argument(
                  'stream_folder', help='The folder where the stream contents have been unpacked')
              parser.add_argument(
                  'build_sha', help='The short git SHA of the current build')
              args = parser.parse_args()
          
              rewrite_agent_paths(args.stream_folder, args.build_sha)
          
          def rewrite_agent_paths(stream_folder, build_sha):
              target = path.join(
                  stream_folder,
                  "v1",
                  "com.ubuntu.juju-build-{}-${index_type}.json".format(build_sha)
              )
              with open(target) as f:
                  stream_data = json.load(f)
          
              stream_data = patch_agent_path_r(stream_data, stream_data, build_sha)
              with open(target, 'w') as f:
                  f.write(json.dumps(stream_data, indent=4))
          
          def patch_agent_path_r(d, u, sha):
              for k, v in u.items():
                  if isinstance(v, collections.abc.Mapping):
                      d[k] = patch_agent_path_r(d.get(k, {}), v, sha)
                  elif isinstance(v, str):
                      if "agent/build-" in v:
                          d[k] = "agent/{}".format(
                              str.lstrip(v, "agent/build-{}/".format(sha))
                          )
              return d
          
          
          if __name__ == "__main__":
              sys.exit(main())
          EOT

          chmod +x ${WORKSPACE}/stream-patcher.py
